/* references:
        language: https://developers.google.com/protocol-buffers/docs/proto3
        comments: https://developers.google.com/protocol-buffers/docs/proto3#adding-comments
*/


syntax = "proto3";
package ie.gmit.serji;
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "ie.gmit.serji.passwordservice";

/* Password Service defining the two basic functions:
        hash() - takes a HashInput object and returns a HashOutput object
        validate() - takes a ValidateInput and returns a BoolValue */
service PasswordService {

    rpc hash (HashInput) returns (HashOutput);

    rpc validate (ValidateInput) returns (google.protobuf.BoolValue);

    // extra generate password method - takes in an int (UserId) and returns a HashInput
    // object (with that userId)  ready to be passed back to the hash() method
    rpc generatePassword (google.protobuf.Int32Value) returns (HashInput);
}

/*  Input object for the hash() method
    Return object for the generatePassword() method
*/
message HashInput {
    int32 userId = 1; // userId of the user whose password to hash
    string password = 2; // the password 'attempt' relating to the userId
}

/* Output object for the hash() method */
message HashOutput {
    int32 userId = 1; // returned userId because method will be async
    bytes hashedPassword = 2; // hash of input password
    bytes salt = 3; // salt used to generate the hashedPassword
}

/* Input object for the validate() method */
message ValidateInput {
    string password = 1;
    bytes hashedPassword = 2;
    bytes salt = 3;
}
